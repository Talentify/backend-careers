openapi: 3.0.0
info:
  title: 'Jobs Find'
  description: 'API to search and create jobs'
  contact:
    email: filipemansano@gmail.com.com
  license:
    name: 'Apache 2.0'
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: '1.0'
servers:
  -
    url: 'http://localhost:8000/'
    description: 'Development server'
paths:
  /auth:
    post:
      tags:
        - auth
      summary: 'authenticate user and receive JWT'
      description: 'Perform user authentication based on your email and password, and if validated returns the JWT'
      operationId: singin
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  default: admin@system.local
                password:
                  type: string
                  default: password
              type: object
      responses:
        '200':
          description: OK
        '422':
          description: 'invalid post data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorValidation'
        '401':
          description: 'unauthenticated user'
  /auth/signout:
    get:
      tags:
        - auth
      summary: 'disconnect the user and invalidate the JWT'
      description: 'revokes the informed JWT'
      operationId: signout
      responses:
        '200':
          description: OK
        '401':
          description: 'unauthenticated user'
      security:
        -
          apiAuth: []
  /jobs:
    get:
      tags:
        - jobs
      summary: 'get all jobs'
      description: 'Fetch all jobs with pagination'
      operationId: showAllJobs
      parameters:
        -
          name: limit
          in: query
          description: 'maximum number of results to return'
          required: false
          schema:
            type: integer
        -
          name: page
          in: query
          description: 'number of page'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
  /manage/jobs:
    post:
      tags:
        - jobs
      summary: 'create a job'
      description: 'createa a new job'
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              required:
                - title
                - description
                - status
              properties:
                title:
                  type: string
                description:
                  type: string
                status:
                  type: string
                  enum: [OPEN, OPEN, STANDBY, FINISHED, CLOSED]
                workplace:
                  type: string
                salary:
                  type: number
                  format: float
              type: object
      responses:
        '200':
          description: OK
        '422':
          description: 'invalid post data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorValidation'
        '401':
          description: 'unauthenticated user'
      security:
        -
          apiAuth: []
  '/jobs/{id}':
    get:
      tags:
        - jobs
      summary: 'get a job'
      description: 'get specific job informed by id'
      operationId: showOneJob
      parameters:
        -
          name: id
          in: path
          description: 'ID of job to fetch'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '404':
          description: 'Not found job by id'
  '/manage/jobs/{id}':
    put:
      tags:
        - jobs
      summary: 'update a job'
      description: 'update specific job informed by id'
      operationId: create
      parameters:
        -
          name: id
          in: path
          description: 'ID of job to update'
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              required:
                - title
                - description
                - status
              properties:
                title:
                  type: string
                description:
                  type: string
                status:
                  type: string
                  enum: [OPEN, OPEN, STANDBY, FINISHED, CLOSED]
                workplace:
                  type: string
                salary:
                  type: number
                  format: float
              type: object
      responses:
        '200':
          description: OK
        '404':
          description: 'Not found job by id'
        '422':
          description: 'invalid post data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorValidation'
        '401':
          description: 'unauthenticated user'
      security:
        -
          apiAuth: []
    delete:
      tags:
        - jobs
      summary: 'delete a job'
      description: 'delete specific job informed by id'
      operationId: delete
      parameters:
        -
          name: id
          in: path
          description: 'ID of job to delete'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '404':
          description: 'Not found job by id'
      security:
        -
          apiAuth: []
components:
  schemas:
    ErrorValidation:
      required:
        - message
        - errors
      properties:
        errors:
          type: array
          items:
            type: string
        message:
          type: string
      type: object
  securitySchemes:
    apiAuth:
      type: http
      description: 'Login with email and password to get the authentication token'
      name: 'Token based Based'
      in: header
      bearerFormat: JWT
      scheme: bearer
